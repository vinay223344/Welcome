=====================================================================
                                                                     IR Lab-1 (Term Incidence Matrix)
=====================================================================
import os
from tabulate import tabulate
os.chdir("C:/Users/rvr/Desktop/OMPR")
l=os.listdir()
d={}
totalwords=[]
for i in l:
    f=open(i,"r")
    q=f.read().lower()
    q=q.split()
    for x in q:
        if(not(x.isalnum())):
            p=list(x).copy()
            for t in x:
                if(not t.isalnum()):
                    p.remove(t)
                    flag=0
            if(flag==0):
                q[q.index(x)]=''.join(p)
    s=sorted(list(set(((q)))))
    totalwords+=s
    d[i]=s
    f.close()
totalwords=sorted(list(set(totalwords)))
w=[]
for x in totalwords:
    e=[]
    e.append(x)
    for y in d:
        if(x in d[y]):
            e.append(1)
        else:
            e.append(0)
    w.append(e)
print(tabulate(w,headers=['Words']+l,tablefmt='grid'))
def finding(g):
    e=[]
    if(g in totalwords):
        k=totalwords.index(g)
        for i in range(1,len(l)+1):
            if(w[k][i]==1):
                e.append(l[i-1])
    return e
'''def subs(g):
    d=[]
    for x in totalwords:
        if(g in x):
            d+=finding(totalwords,w,x,l)
    return d'''
print("Searching with the help of Term Index Matrix!!!")
a=input("Enter a Boolean Query to search in available Collection:").lower()
a=a.split()
d=[]
result=[]
f=[]
s=[]
top=-1
temp=1
for x in range(0,len(a)):
    if(temp==0):
        temp=1
        continue
    if(a[x] in ['not']):
        f.append(set(l)-set(finding(a[x+1])))
        temp=0
    elif(a[x] not in ["and","or"]):
        f.append(set(finding(a[x])))
    elif(a[x]=='and'):
        top+=1
        s.append('and')
    elif(a[x]=='or'):
        while(top>-1 and s[top]=='and'):
            g=f[len(f)-1]
            h=f[len(f)-2]
            f.remove(g)
            f.remove(h)
            f.append(g.intersection(h))
            top-=1
        top+=1
        s.insert(top,'or')
while(top!=-1):
    g=f[len(f)-1]
    h=f[len(f)-2]
    f.remove(g)
    f.remove(h)
    if(s[top]=='and'):
        f.append(g.intersection(h))
    elif(s[top]=='or'):
        f.append(g.union(h))
    top-=1
#print(f)
if(len(list(f[0]))==0):
    print("No Related Documents found!!!");
else:
    print("Related documents for given query are:",end=' ')
    for x in f:
        for y in sorted(list(x)):
            print(y,end=' ')

=====================================================================
                                                                     IR Lab-2 (Inverted Index)
=====================================================================
import os
os.chdir("C:/Users/rvr/Desktop/OMPR")
l=os.listdir()
d={}
totalwords=[]
for i in l:
    f=open(i,"r")
    q=f.read().lower()
    q=q.split()
    for x in q:
        if(not(x.isalnum())):
            p=list(x).copy()
            for t in x:
                if(not t.isalnum()):
                    p.remove(t)
                    flag=0
            if(flag==0):
                q[q.index(x)]=''.join(p)
    s=sorted(list(set(((q)))))
    totalwords+=s
    d[i]=s
    f.close()
totalwords=sorted(list(set(totalwords)))
w=[]
dic={}
for x in totalwords:
    dic[x]=[]
    for y in d:
        if(x in d[y]):
            dic[x].append(y)
for i in dic:
    print(i,':','->'.join(dic[i]))

def finding(x):
    if x not in dic:
        return []
    return dic[x]
'''def subs(g):
    d=[]
    for x in totalwords:
        if(g in x):
            d+=finding(x,dic)
    return d'''


result=[]
print("Searching with the help of Inverted Index!!!")
a=input("Enter a BooleanQuery to search in available Collection:").lower()
a=a.split()
d=[]
result=[]
f=[]
s=[]
top=-1
temp=1
for x in range(0,len(a)):
    if(temp==0):
        temp=1
        continue
    if(a[x] in ['not']):
        f.append(set(l)-set(finding(a[x+1])))
        temp=0
    elif(a[x] not in ["and","or"]):
        f.append(set(finding(a[x])))
    elif(a[x]=='and'):
        top+=1
        s.append('and')
    elif(a[x]=='or'):
        while(top>-1 and s[top]=='and'):
            g=f[len(f)-1]
            h=f[len(f)-2]
            f.remove(g)
            f.remove(h)
            f.append(g.intersection(h))
            top-=1
        top+=1
        s.insert(top,'or')
while(top!=-1):
    g=f[len(f)-1]
    h=f[len(f)-2]
    f.remove(g)
    f.remove(h)
    if(s[top]=='and'):
        f.append(g.intersection(h))
    elif(s[top]=='or'):
        f.append(g.union(h))
    top-=1
if(len(list(f[0]))==0):
    print("No Related Documents found!!!");
else:
    print("Related documents for given query are:",end=' ')
    for x in f:
        for y in sorted(list(x)):
            print(y,end=' ')

=====================================================================
                                                                     IR Lab-3 (Positional Indexing)
=====================================================================
import os
import numpy as np
os.chdir("C:/Users/rvr/Desktop/OMPR")
l=os.listdir()
result={}
for i in range(len(l)):
    f=open(l[i],'r')
    s=(f.read().lower()).split()
    for x in s:
        if(not(x.isalnum())):
            p=list(x).copy()
            for t in x:
                if(not t.isalnum()):
                    p.remove(t)
                    flag=0
            if(flag==0):
                s[s.index(x)]=''.join(p)
    for x in sorted(list(set(s))):
        q={}
        o=[]
        for y in range(0,len(s)):
            if(s[y]==x):
                o+=[y+1]
        q[i+1]=o
        if x not in result:
            result[x]=q
        else:
            result[x].update(q)
    f.close()
print("Resultant Positional Indexes are:")
for x in result:
    print("<",x,":",len(result[x]))
    q=result[x]
    for i in q:
        print(i," : ",q[i])
    print(">\n")
q=input("Enter the Phrase Query to search in available Collections:").split()
for x in s:
       if(not(x.isalnum())):
           p=list(x).copy()
           for t in x:
               if(not t.isalnum()):
                   p.remove(t)
                   flag=0
           if(flag==0):
               s[s.index(x)]=''.join(p)
w=set([int(i+1) for i in range(len(l))])
flag=0
e=set()
for x in w:
    e=set()
    d=set()
    for i in q:
        if(i in result.keys()):
            if(x in result[i].keys()):
                d=np.array(result[i][x])
                if(q.index(i)==0):
                    d=d+1
                    e=set(d)
                else:
                    e=e.intersection(set(d))
                    e=set(np.array(list(e))+1)
            else:
                e=set()
                d=set()
        else:
            print("No related Documents are Present to display!!!")
            quit()
    if(len(list(e))!=0):
        print("Given Phrase is at position/s",','.join(str(z) for z in list(np.array(sorted(list(e)))-len(q))),"in document",l[x-1])
        flag=1
if(flag==0):
        print("Given Phrase Not found in any Documents!!!")

=====================================================================
                                                                     IR Lab-4(Bi-word Indexing)
=====================================================================

import os
import numpy as np
os.chdir("C:/Users/omoni/Downloads/Text Files")
l=os.listdir()
d={}
for i in l:
    g=[]
    f=open(i,"r")
    s=(f.read().lower()).split()
    for x in s:
       if(not(x.isalnum())):
           p=list(x).copy()
           for t in x:
               if(not t.isalnum()):
                   p.remove(t)
                   flag=0
           if(flag==0):
               s[s.index(x)]=''.join(p)
    if(len(s)==1):
        g=s
    else:
        for x in range(1,len(s)):
            g.append([s[x-1],s[x]])
    d[i]=g
    f.close()
def finding(a,b):
    r=[]
    for x in range(0,len(d[b])):
        if(d[b][x]==a):
            r.append(x)
    return set(r)
for x in d:
    print("===========Biwords in document:",x,"====================")
    for y in range(0,len(d[x])):
        print(' '.join(d[x][y]))
q=input("Enter Phrase Query to find in available documents:").split()
for x in q:
       if(not(x.isalnum())):
           p=list(x).copy()
           for t in x:
               if(not t.isalnum()):
                   p.remove(t)
                   flag=0
           if(flag==0):
               q[q.index(x)]=''.join(p)
w=[]
if(len(q)==1):
    w.append(q)
else:
    for x in range(1,len(q)):
        w.append([q[x-1],q[x]])
print(w)
'''
if(len(q)!=1):
    h=0
    for x in l:
        flag=0
        for y in w:
            if y in d[x]:
                flag=1
            else:
                flag=0
                break
        if(flag!=0):
            print("Given Phrase is present in document:",x)
            h=1
    if(h==0):
        print("Given Phrase is not present in any available documents!!!")
'''
result=[]
if(len(q)!=1):
    for x in l:
        for y in range(len(w)):
            if(y==0):
                r=finding(w[y],x)
            else:
                if(len(list(r))==0 and w[y] not in d[x]):
                    break
                t=finding(w[y],x)
                r=t.intersection(set(np.array(list(r))+1))
        if(len(list(r))!=0 and y==len(w)-1):
            result.append(x)
    if(len(result)!=0):
        print("Given Phrase Query is in document/documents:",' '.join(result))
    else:
        print("Given Phrase not present in availabe documents!!!")
else:
    flag=0
    for x in d:
        h=np.array(d[x]).flatten()
        if(w[0][0] in h):
            print("Given Phrase Query is in document:",x)
            flag=1
    if(flag==0):
        print("Given Phrase not present in availabe documents!!!")





=====================================================================
                                                                     IR Lab-5 (Bigram Index)
=====================================================================

def bigram(s):
    d=[]
    for i in range(len(s)-1):
        d+=[s[i]+s[i+1]]
    return d
def intersect(g,bigrams):
    r=set()
    p=1
    for x in g:
        if(p==1):
            r=set(bigrams.get(x,[]))
            p=0
        else:
            r=r.intersection(bigrams.get(x,[]))
    return r
import os
os.chdir("C:/Users/exam2/Desktop/OMPR")
l=os.listdir()
bigrams={}
totalwords=[]
pr=0
for x in l:
    f=open(x,"r")
    p=(f.read().lower()).split()
    totalwords+=p
    s=list(map(lambda x:'$'+x+'$',p))
    for i in range(len(s)):
        for j in range(len(s[i])-1):
            if(s[i][j]+s[i][j+1] in bigrams.keys()):
                bigrams[s[i][j]+s[i][j+1]]+=[p[i]]
            else:
                bigrams[s[i][j]+s[i][j+1]]=[]
                bigrams[s[i][j]+s[i][j+1]]+=[p[i]]
    f.close()
#print(bigrams)
totalwords=set(totalwords)
result=set()
single=[]
q=(input("Enter Query:").lower())
if('*' in q):
    if(q.count('*')==1):
        if(q.index('*')==0):       #*lo
            g=bigram(q[1:]+'$')
            result=intersect(g,bigrams)
        elif(q.index('*')==len(q)-1):  #he*
            g=bigram('$'+q[:-1])
            result=intersect(g,bigrams)
        else:
            g=bigram('$'+q[:q.index('*')]) #h*o
            result=intersect(g,bigrams)
            g=bigram(q[q.index('*')+1:]+'$')
            result=result.intersection(intersect(g,bigrams))
    else:
        if(q[0]!='*' and q[len(q)-1]!='*'):   #h*l*o
            q='$'+q+'$'                     #h*el*o
            q=q.split('*')
            for x in q:
                if(len(x)!=1):
                    g=bigram(x)
                    if(q.index(x)==0):
                        result=intersect(g,bigrams)
                    else:
                        result=result.intersection(intersect(g,bigrams))
                else:
                    single.append(x)
        elif(q[0]=='*' and q[len(q)-1]=='*'):   
            w=q[1:len(q)-1]
            if('*' not in w):
                if(len(w)==1):          #*h*
                    for x in totalwords:
                        if(w in x):
                            print(x,end=' ')
                            pr=1
                else:                   #*ll*
                    g=bigram(w)
                    result=intersect(g,bigrams)
                    print(result)
                    pr=1
            else:                       #*ll*o*
                w=w.split('*')
                for x in totalwords:
                    flag=0
                    for y in w:
                        if(y in x):
                            flag=1
                        else:
                            flag=0
                            break
                    if(flag==1):
                        print(x,end=' ')
                        pr=1
        else:
            if(q[0]=='*'):
                w=q[1:]
            else:
                w=q[:len(q)-1]
            w=w.split('*')
            for x in totalwords:
                flag=0
                for y in w:
                    if(y in x):
                        flag=1
                    else:
                        flag=0
                        break
                if(flag==1):
                    print(x,end=' ')
                    pr=1
flag=0
for x in result:
    flag=0
    for y in single:
        if y not in x:
            flag=1
            break
    if(flag!=1):
        print('Resultant Set is:',x)
        pr=1
if(pr!=1):
    print("Given Query is Not Valid!!!")


